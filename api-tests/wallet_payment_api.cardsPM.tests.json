{
	"info": {
		"_postman_id": "2e4515b5-4cb6-49f1-b7d2-48386ade3ba6",
		"name": "pagoPA Payment Wallet API - PM",
		"description": "API to handle payment wallets PagoPA for App IO, where a wallet is triple between user identifier, payment instrument and services (i.e pagoPA, bpd).\n\nThe wallet onboarding outcome and walletId are returned as query params to the app IO, for example \n/wallets/{walletId}/outcomes?outcome=0&walletId=123. The possible outcome are:\n- SUCCESS(0)\n- GENERIC_ERROR(1)\n- AUTH_ERROR(2)\n- TIMEOUT(4)\n- CANCELED_BY_USER(8)\n- INVALID_SESSION(14)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23305473",
		"_collection_link": "https://solar-shuttle-72092.postman.co/workspace/Wallet~1247c858-5774-4bb2-b6e4-a5d7c22704e0/collection/23305473-2e4515b5-4cb6-49f1-b7d2-48386ade3ba6?action=share&source=collection_link&creator=23305473"
	},
	"item": [
		{
			"name": "Start session",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for IO - Wallet Payment] - Start session\", () => {",
							"  pm.response.to.have.status(201);",
							"  const responseJson = pm.response.json();",
							"  pm.environment.set(\"SHARED_SESSION_TOKEN\", responseJson.token);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{WALLET_TOKEN_TEST}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ENV}}/session-wallet/v1/session",
					"host": [
						"{{ENV}}"
					],
					"path": [
						"session-wallet",
						"v1",
						"session"
					]
				},
				"description": "Creates a new wallet"
			},
			"response": []
		},
		{
			"name": "Get payment methods",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding - CARDS] Payment methods retrieved successfully with GET /payment-methods\", function () {",
							"    pm.response.to.have.status(200);",
							"    var paymentMethods = pm.response.json().paymentMethods;",
							"    pm.expect(paymentMethods.length).to.be.greaterThan(0);",
							"    var paymentMethodName = pm.environment.get(\"PAYMENT_METHOD_NAME\");",
							"    var paymentMethodId = paymentMethods.filter(p => (p.status === \"ENABLED\" && p.name == paymentMethodName))[0]?.id",
							"",
							"    if(paymentMethodId) {",
							"        pm.expect(paymentMethodId).to.be.a.string;",
							"        pm.environment.set(\"PAYMENT_METHOD_ID\", paymentMethodId);",
							"        console.log(`Set paymentMethodId ${paymentMethodId} successfully for payment method name ${pm.environment.get(\"PAYMENT_METHOD_NAME\")}`)",
							"    } else {",
							"        throw Error(`No payment method found for payment method name ${pm.environment.get(\"PAYMENT_METHOD_NAME\")}`);",
							"    }",
							"",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{SHARED_SESSION_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{ENV}}{{SERVICE}}/payment-methods",
					"host": [
						"{{ENV}}{{SERVICE}}"
					],
					"path": [
						"payment-methods"
					]
				},
				"description": "Returns a single wallet"
			},
			"response": []
		},
		{
			"name": "Create a new wallet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding - CARDS] New wallet created successfully with POST /wallets\", function () {",
							"    pm.response.to.have.status(201);",
							"    const redirectUrl = pm.response.json().redirectUrl;",
							"    pm.expect(redirectUrl).to.be.a(\"string\");",
							"    pm.expect(redirectUrl).to.be.include(\"creditcard#\");",
							"    const fragment = redirectUrl.split(\"#\")[1];",
							"    const sessionToken = fragment.split(\"=\")[1];",
							"    pm.expect(sessionToken).to.be.not.null;",
							"    pm.environment.set(\"SESSION_TOKEN\", sessionToken);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{SHARED_SESSION_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"paymentMethodId\": \"{{PAYMENT_METHOD_ID}}\",\n  \"applications\": [\n    \"PAGOPA\"\n  ],\n  \"useDiagnosticTracing\": \"{{USE_DIAGNOSTIC_TRACING}}\"\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ENV}}{{SERVICE}}/wallets",
					"host": [
						"{{ENV}}{{SERVICE}}"
					],
					"path": [
						"wallets"
					]
				},
				"description": "Creates a new wallet"
			},
			"response": []
		},
		{
			"name": "Get wallet by user identifier",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding - CARDS] Wallet retrieved successfully by it's user id with GET /wallets\", function () {",
							"    pm.response.to.have.status(200);",
							"    var responseJson = pm.response.json();",
							"    var wallets = responseJson.wallets;",
							"    pm.expect(wallets.length).to.be.greaterThan(0);",
							"    pm.expect(wallets.filter(w => w.status == \"VALIDATED\").length).to.be.equals(wallets.length);",
							"    var walletId = wallets.filter(w => w.status == \"VALIDATED\" && w.paymentMethodId == pm.environment.get(\"PAYMENT_METHOD_ID\"))[0].walletId",
							"    pm.environment.set(\"WALLET_ID\", walletId);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{SHARED_SESSION_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "x-user-id",
						"value": "{{x-user-id}}"
					}
				],
				"url": {
					"raw": "{{ENV}}{{SERVICE}}/wallets",
					"host": [
						"{{ENV}}{{SERVICE}}"
					],
					"path": [
						"wallets"
					]
				},
				"description": "Returns a of wallets related to user"
			},
			"response": []
		},
		{
			"name": "Get wallet by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding - CARDS] Wallet retrieved successfully by it's id with GET /wallets/{walletId}\", function () {",
							"    pm.response.to.have.status(200);",
							"    const wallet = pm.response.json();",
							"    const status = wallet.status;",
							"    const paymentMethodId = wallet.paymentMethodId; ",
							"    pm.expect(status).to.be.equals(\"VALIDATED\");",
							"    pm.expect(paymentMethodId).to.be.equals(pm.environment.get(\"PAYMENT_METHOD_ID\"));",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{SHARED_SESSION_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{ENV}}{{SERVICE}}/wallets/{{WALLET_ID}}",
					"host": [
						"{{ENV}}{{SERVICE}}"
					],
					"path": [
						"wallets",
						"{{WALLET_ID}}"
					]
				},
				"description": "Returns a single wallet"
			},
			"response": []
		},
		{
			"name": "Update wallet applications (DISABLED)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding - CARDS] New wallet created successfully with POST /wallets\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"const getWalletById = {",
							"  url: pm.environment.get(\"ENV\") + pm.environment.get(\"SERVICE\") + \"/wallets/\" + pm.environment.get(\"WALLET_ID\"),",
							"  method: 'GET',",
							"  header: {",
							"    'Authorization': `Bearer ${pm.environment.get(\"SHARED_SESSION_TOKEN\")}`",
							"  }",
							"};",
							"",
							"pm.sendRequest(getWalletById, (error, response) => {",
							"  if (error) {",
							"    throw error;",
							"  } else {",
							"    const responseJson = response.json();",
							"    var statusWallet = responseJson.applications[0].status",
							"    pm.expect(statusWallet).to.be.equals(\"DISABLED\");",
							"  }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{SHARED_SESSION_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"applications\": [\n    {\n      \"name\": \"PAGOPA\",\n      \"status\": \"DISABLED\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ENV}}{{SERVICE}}/wallets/{{WALLET_ID}}/applications",
					"host": [
						"{{ENV}}{{SERVICE}}"
					],
					"path": [
						"wallets",
						"{{WALLET_ID}}",
						"applications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update wallet applications (ENABLED)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding - CARDS] Wallet update applications successfully by it's id with PUT /wallets/{walletId}/applications\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"const getWalletById = {",
							"  url: pm.environment.get(\"ENV\") + pm.environment.get(\"SERVICE\") + \"/wallets/\" + pm.environment.get(\"WALLET_ID\"),",
							"  method: 'GET',",
							"  header: {",
							"    'Authorization': `Bearer ${pm.environment.get(\"SHARED_SESSION_TOKEN\")}`",
							"  }",
							"};",
							"",
							"pm.sendRequest(getWalletById, (error, response) => {",
							"  if (error) {",
							"    throw error;",
							"  } else {",
							"    const responseJson = response.json();",
							"    var statusWallet = responseJson.applications[0].status",
							"    pm.expect(statusWallet).to.be.equals(\"ENABLED\");",
							"  }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{SHARED_SESSION_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"applications\": [\n    {\n      \"name\": \"PAGOPA\",\n      \"status\": \"ENABLED\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{ENV}}{{SERVICE}}/wallets/{{WALLET_ID}}/applications",
					"host": [
						"{{ENV}}{{SERVICE}}"
					],
					"path": [
						"wallets",
						"{{WALLET_ID}}",
						"applications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete wallet by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"[Wallet for onboarding - CARDS] Wallet deleted successfully by it's id with DELETE /wallets/{walletId}\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"const getWalletById = {",
							"  url: pm.environment.get(\"ENV\") + pm.environment.get(\"SERVICE\") + \"/wallets/\" + pm.environment.get(\"WALLET_ID\"),",
							"  method: 'GET',",
							"  header: {",
							"    'Authorization': `Bearer ${pm.environment.get(\"SHARED_SESSION_TOKEN\")}`",
							"  }",
							"};",
							"",
							"pm.sendRequest(getWalletById, (error, response) => {",
							"  if (error) {",
							"    throw error;",
							"  } else {",
							"    pm.expect(response.code).to.be.equals(404);",
							"  }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{SHARED_SESSION_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{ENV}}{{SERVICE}}/wallets/{{WALLET_ID}}",
					"host": [
						"{{ENV}}{{SERVICE}}"
					],
					"path": [
						"wallets",
						"{{WALLET_ID}}"
					]
				},
				"description": "Delete a wallet by it's id"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://${{hostname}}"
		}
	]
}